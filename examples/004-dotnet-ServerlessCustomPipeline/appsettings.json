{
  "SemanticMemory": {
    // "AzureBlobs" or "SimpleFileStorage"
    "ContentStorageType": "AzureBlobs",
    // "AzureOpenAIText" or "OpenAI"
    "TextGeneratorType": "AzureOpenAIText",
    // Data ingestion pipelines configuration.
    "DataIngestion": {
      "OrchestrationType": "InProcess",
      // Multiple generators can be used, e.g. for data migration, A/B testing, etc.
      "EmbeddingGeneratorTypes": [
        "AzureOpenAIEmbedding"
      ],
      // Vectors can be written to multiple storages, e.g. for data migration, A/B testing, etc.
      "VectorDbTypes": [
        "AzureCognitiveSearch"
      ]
    },
    "Retrieval": {
      // "AzureCognitiveSearch" or "Qdrant"
      "VectorDbType": "AzureCognitiveSearch",
      // "AzureOpenAIEmbedding" or "OpenAI"
      "EmbeddingGeneratorType": "AzureOpenAIEmbedding"
    },
    "Services": {
      "SimpleFileStorage": {
        "Directory": "tmp-content-storage"
      },
      "SimpleQueues": {
        "Directory": "tmp-queues"
      },
      "SimpleVectorDb": {
        "Directory": "tmp-vector-db",
        "StorageType": "TextFile"
      },
      "AzureBlobs": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureBlobConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        // Azure Storage account name, required when using AzureIdentity auth
        // Note: you can use an env var 'SemanticMemory__Services__AzureBlobs__Account' to set this
        "Account": "",
        // Container where to create directories and upload files
        "Container": "smemory",
        // Required when Auth == ConnectionString
        // Note: you can use an env var 'SemanticMemory__Services__AzureBlobs__ConnectionString' to set this
        "ConnectionString": "",
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "AzureQueue": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureQueueConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        // Azure Storage account name, required when using AzureIdentity auth
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__Account' to set this
        "Account": "",
        // Required when Auth == ConnectionString
        // Note: you can use an env var 'SemanticMemory__Orchestration__DistributedPipeline__AzureQueue__ConnectionString' to set this
        "ConnectionString": "",
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "RabbitMq": {
        "Host": "127.0.0.1",
        "Port": "5672",
        "Username": "user",
        "Password": ""
      },
      "AzureCognitiveSearch": {
        // "ApiKey" or "AzureIdentity". For other options see <AzureCognitiveSearchConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>",
        "APIKey": "",
      },
      "Qdrant": {
        "Endpoint": "https://<...>",
        "APIKey": "",
      },
      "AzureOpenAIText": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>.openai.azure.com/",
        "Deployment": "",
        "APIKey": "",
        // "ChatCompletion" or "TextCompletion"
        "APIType": "ChatCompletion",
        "MaxRetries": 10
      },
      "AzureOpenAIEmbedding": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>.openai.azure.com/",
        "Deployment": "",
        "APIKey": "",
      },
      "OpenAI": {
        "TextModel": "gpt-3.5-turbo-16k",
        "EmbeddingModel": "text-embedding-ada-002",
        "APIKey": "",
        "OrgId": "",
        "MaxRetries": 10
      },
    },
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}