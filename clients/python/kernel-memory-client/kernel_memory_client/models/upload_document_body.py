# Copyright (c) 2025 Microsoft
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import json
from collections.abc import Mapping
from io import BytesIO
from typing import TYPE_CHECKING, Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, File, FileJsonType, Unset

if TYPE_CHECKING:
    from ..models.upload_document_body_tags import UploadDocumentBodyTags

T = TypeVar("T", bound="UploadDocumentBody")


@_attrs_define
class UploadDocumentBody:
    """
    Attributes:
        index (Union[Unset, str]): Name of the index where to store memories generated by the files.
        document_id (Union[Unset, str]): Unique ID used for import pipeline and document ID.
        tags (Union[Unset, UploadDocumentBodyTags]): Tags to apply to the memories extracted from the files.
        steps (Union[Unset, list[str]]): How to process the files, e.g. how to extract/chunk etc.
        files (Union[Unset, list[File]]): Files to process and extract memories from.
    """

    index: Unset | str = UNSET
    document_id: Unset | str = UNSET
    tags: Union[Unset, "UploadDocumentBodyTags"] = UNSET
    steps: Unset | list[str] = UNSET
    files: Unset | list[File] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        index = self.index

        document_id = self.document_id

        tags: Unset | dict[str, Any] = UNSET
        if not isinstance(self.tags, Unset):
            tags = self.tags.to_dict()

        steps: Unset | list[str] = UNSET
        if not isinstance(self.steps, Unset):
            steps = self.steps

        files: Unset | list[FileJsonType] = UNSET
        if not isinstance(self.files, Unset):
            files = []
            for files_item_data in self.files:
                files_item = files_item_data.to_tuple()

                files.append(files_item)

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if index is not UNSET:
            field_dict["index"] = index
        if document_id is not UNSET:
            field_dict["documentId"] = document_id
        if tags is not UNSET:
            field_dict["tags"] = tags
        if steps is not UNSET:
            field_dict["steps"] = steps
        if files is not UNSET:
            field_dict["files"] = files

        return field_dict

    def to_multipart(self) -> dict[str, Any]:
        index = self.index if isinstance(self.index, Unset) else (None, str(self.index).encode(), "text/plain")

        document_id = (
            self.document_id
            if isinstance(self.document_id, Unset)
            else (None, str(self.document_id).encode(), "text/plain")
        )

        tags: Unset | tuple[None, bytes, str] = UNSET
        if not isinstance(self.tags, Unset):
            tags = (None, json.dumps(self.tags.to_dict()).encode(), "application/json")

        steps: Unset | tuple[None, bytes, str] = UNSET
        if not isinstance(self.steps, Unset):
            _temp_steps = self.steps
            steps = (None, json.dumps(_temp_steps).encode(), "application/json")

        files: Unset | tuple[None, bytes, str] = UNSET
        if not isinstance(self.files, Unset):
            files = files

        field_dict: dict[str, Any] = {}
        for prop_name, prop in self.additional_properties.items():
            field_dict[prop_name] = (None, str(prop).encode(), "text/plain")

        field_dict.update({})
        if index is not UNSET:
            field_dict["index"] = index
        if document_id is not UNSET:
            field_dict["documentId"] = document_id
        if tags is not UNSET:
            field_dict["tags"] = tags
        if steps is not UNSET:
            field_dict["steps"] = steps
        if files is not UNSET:
            field_dict["files"] = files

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.upload_document_body_tags import UploadDocumentBodyTags

        d = dict(src_dict)
        index = d.pop("index", UNSET)

        document_id = d.pop("documentId", UNSET)

        _tags = d.pop("tags", UNSET)
        tags: Unset | UploadDocumentBodyTags
        if isinstance(_tags, Unset):
            tags = UNSET
        else:
            tags = UploadDocumentBodyTags.from_dict(_tags)

        steps = cast(list[str], d.pop("steps", UNSET))

        files = []
        _files = d.pop("files", UNSET)
        for files_item_data in _files or []:
            files_item = File(payload=BytesIO(files_item_data))

            files.append(files_item)

        upload_document_body = cls(
            index=index,
            document_id=document_id,
            tags=tags,
            steps=steps,
            files=files,
        )

        upload_document_body.additional_properties = d
        return upload_document_body

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
