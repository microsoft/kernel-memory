{
  "KernelMemory": {
    "ServiceAuthorization": {
      "Endpoint": "http://127.0.0.1:9001/",
      "AccessKey": ""
    },
    "Services": {
      "SimpleVectorDb": {
        // Options: "Disk" or "Volatile". Volatile data is lost after each execution.
        "StorageType": "Volatile",
        // Directory where files are stored.
        "Directory": "_vectors"
      },
      "AzureAISearch": {
        // "ApiKey" or "AzureIdentity". For other options see <AzureAISearchConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "AzureIdentity",
        "Endpoint": "https://<...>",
        "APIKey": ""
      },
      "Postgres": {
        // Postgres instance connection string
        "ConnectionString": "Host=localhost;Port=5432;Username=public;Password=",
        // Mandatory prefix to add to the name of table managed by KM,
        // e.g. to exclude other tables in the same schema.
        "TableNamePrefix": "tests-"
      },
      "Qdrant": {
        "Endpoint": "http://127.0.0.1:6333",
        "APIKey": ""
      },
      "Redis": {
        // Redis connection string, e.g. "localhost:6379,password=..."
        "ConnectionString": "localhost:6379",
        // List of tags that clients will use to filter memories. When using Redis,
        // the list of tags must be configured, for data to be saved correctly.
        "Tags": {
          "type": ",",
          "user": ",",
          "ext": ","
        }
      },
      "MongoDbAtlas": {
        "ConnectionString": "mongodb://localhost:27017/?directConnection=true&serverSelectionTimeoutMS=2000",
        "DatabaseName": "TestKernelMemory"
      },
      "OpenAI": {
        // Name of the model used to generate text (text completion or chat completion)
        "TextModel": "gpt-3.5-turbo-16k",
        // The max number of tokens supported by the text model.
        "TextModelMaxTokenTotal": 16384,
        // Name of the model used to generate text embeddings
        "EmbeddingModel": "text-embedding-ada-002",
        // The max number of tokens supported by the embedding model
        // See https://platform.openai.com/docs/guides/embeddings/what-are-embeddings
        "EmbeddingModelMaxTokenTotal": 8191,
        // OpenAI API Key
        "APIKey": "",
        // OpenAI Organization ID (usually empty, unless you have multiple accounts on different orgs)
        "OrgId": "",
        // How many times to retry in case of throttling
        "MaxRetries": 10
      },
      "LlamaSharp": {
        // path to file, e.g. "llama-2-7b-chat.Q6_K.gguf"
        "ModelPath": "",
        // Max number of tokens supported by the model
        "MaxTokenTotal": 4096
        // Optional parameters
        // "GpuLayerCount": 32,
        // "Seed": 1337,
      }
    }
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information"
    }
  }
}